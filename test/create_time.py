#!/usr/bin/env python

# encoding: utf-8
'''
# @Time    : 2020/11/8 9:45
# @Author  : shursulei
# @Site    : 
# @File    : create_time.py
# @Software: PyCharm Community Edition
# @describe:
'''
import calendar
from datetime import datetime

from tools.rand import random_avg_split
# 1天1440个分钟
from tools.random_probability import HourMinuteProbabilityGenerator

hour_minute = [i for i in range(1440)]
# 1440分钟对应的概率
hour_minute_probability = [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                           7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                           7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                           7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                           7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 6,
                           6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7,
                           7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8,
                           8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11,
                           11, 11, 11, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14,
                           15, 15, 15, 15, 15, 15, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 20, 20, 20, 21,
                           21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28,
                           28, 28, 28, 29, 29, 30, 30, 30, 30, 31, 31, 31, 32, 33, 33, 33, 34, 34, 34, 35, 35, 36, 36,
                           37, 37, 38, 38, 39, 39, 39, 40, 40, 41, 41, 41, 42, 42, 43, 43, 44, 44, 45, 45, 45, 46, 46,
                           47, 47, 47, 48, 48, 48, 49, 49, 50, 50, 50, 51, 51, 51, 52, 52, 53, 53, 54, 54, 54, 55, 55,
                           55, 56, 56, 57, 57, 58, 58, 59, 59, 59, 60, 60, 61, 61, 61, 62, 62, 63, 63, 63, 64, 64, 65,
                           65, 65, 66, 66, 66, 67, 67, 68, 68, 68, 69, 69, 69, 69, 70, 70, 70, 70, 71, 71, 71, 71, 72,
                           72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 72, 73, 73, 73, 73, 73, 73, 73, 73,
                           73, 73, 74, 74, 74, 74, 74, 74, 75, 75, 75, 75, 76, 76, 76, 77, 77, 77, 77, 78, 78, 78, 79,
                           79, 79, 79, 80, 80, 80, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 84, 85, 85, 86, 86, 86, 87,
                           87, 88, 88, 88, 89, 89, 90, 90, 90, 91, 91, 92, 92, 93, 93, 94, 94, 95, 96, 96, 97, 97, 98,
                           98, 99, 100, 100, 101, 102, 102, 103, 104, 104, 105, 106, 106, 107, 107, 108, 108, 109, 109,
                           110, 110, 110, 111, 111, 111, 111, 111, 111, 111, 112, 112, 112, 112, 112, 112, 112, 112,
                           112, 112, 112, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113, 113,
                           113, 113, 113, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 114, 115, 115, 115, 115,
                           115, 115, 115, 115, 116, 116, 116, 116, 116, 116, 116, 117, 117, 117, 117, 117, 117, 118,
                           118, 118, 118, 118, 119, 119, 119, 119, 120, 120, 120, 120, 121, 121, 121, 121, 121, 122,
                           122, 123, 123, 123, 123, 124, 124, 124, 125, 125, 125, 125, 125, 126, 126, 126, 126, 126,
                           127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127,
                           127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 126, 126, 126, 126, 126, 126, 126,
                           125, 125, 125, 125, 125, 124, 124, 124, 124, 123, 123, 123, 122, 122, 122, 121, 121, 121,
                           121, 120, 120, 120, 120, 119, 119, 119, 118, 118, 118, 118, 118, 117, 117, 117, 117, 117,
                           116, 116, 116, 116, 116, 115, 115, 115, 115, 115, 114, 114, 114, 114, 114, 113, 113, 113,
                           113, 112, 112, 112, 112, 112, 111, 111, 111, 111, 110, 110, 110, 110, 110, 109, 109, 109,
                           109, 109, 108, 108, 108, 108, 107, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 105,
                           105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 103, 103,
                           103, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 101, 101, 101, 101, 101, 101, 101,
                           101, 101, 101, 101, 101, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100, 100,
                           100, 100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99,
                           99, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 97,
                           97, 97, 97, 97, 97, 97, 97, 97, 97, 97, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98, 98,
                           99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 99, 100, 100, 100, 100, 100, 100, 101, 101,
                           101, 101, 101, 101, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 104, 104, 104, 104,
                           105, 105, 105, 105, 106, 106, 107, 107, 107, 107, 108, 108, 108, 108, 109, 109, 109, 109,
                           109, 109, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110, 110,
                           110, 110, 110, 110, 110, 110, 110, 110, 110, 109, 109, 109, 109, 109, 109, 109, 109, 108,
                           108, 108, 108, 108, 108, 108, 108, 107, 107, 107, 107, 106, 106, 106, 106, 106, 106, 105,
                           105, 105, 105, 105, 105, 105, 105, 105, 104, 104, 104, 104, 104, 104, 104, 104, 104, 104,
                           104, 104, 104, 104, 104, 104, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103, 103,
                           103, 103, 103, 103, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102, 102,
                           102, 102, 102, 102, 102, 102, 102, 102, 102, 103, 103, 103, 103, 103, 103, 103, 103, 103,
                           104, 104, 104, 104, 104, 105, 105, 105, 105, 105, 106, 106, 106, 107, 107, 107, 108, 108,
                           108, 109, 109, 109, 110, 110, 110, 111, 111, 112, 112, 113, 113, 113, 114, 114, 115, 115,
                           116, 116, 117, 117, 118, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 123,
                           124, 124, 125, 125, 125, 126, 126, 127, 127, 127, 127, 128, 128, 128, 129, 129, 129, 130,
                           130, 130, 130, 131, 131, 131, 132, 132, 132, 132, 133, 133, 133, 134, 134, 134, 134, 135,
                           135, 135, 135, 135, 136, 136, 136, 136, 136, 137, 137, 137, 137, 137, 137, 138, 138, 138,
                           138, 138, 138, 138, 138, 138, 138, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139, 139,
                           139, 139, 139, 139, 139, 140, 140, 140, 140, 140, 140, 140, 140, 141, 141, 141, 141, 142,
                           142, 142, 142, 143, 143, 143, 144, 144, 144, 144, 145, 145, 145, 146, 146, 146, 147, 147,
                           147, 147, 148, 148, 148, 148, 149, 149, 149, 149, 149, 149, 149, 150, 150, 150, 150, 150,
                           150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150,
                           150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 150, 149, 149, 149, 149, 149, 149,
                           149, 149, 149, 149, 149, 148, 148, 148, 148, 148, 148, 148, 148, 147, 147, 147, 147, 147,
                           147, 147, 146, 146, 146, 146, 146, 145, 145, 145, 145, 145, 144, 144, 144, 143, 143, 143,
                           143, 142, 142, 141, 141, 141, 140, 140, 139, 139, 138, 138, 138, 137, 137, 136, 136, 135,
                           134, 134, 133, 132, 132, 131, 131, 130, 129, 128, 127, 127, 126, 125, 124, 123, 122, 121,
                           120, 119, 118, 117, 116, 115, 114, 113, 112, 111, 110, 109, 108, 107, 105, 104, 103, 102,
                           100, 99, 98, 96, 95, 93, 92, 91, 89, 87, 86, 85, 83, 81, 80, 78, 77, 76, 75, 73, 71, 70, 68,
                           66, 65, 63, 61, 60, 58, 56, 55, 53, 51, 49, 48, 46, 44, 43, 41, 39, 37, 35, 34, 32, 30, 28,
                           27, 25, 23, 21, 19, 17, 15, 14, 12, 10, 7]
hour_minute_probability_table = [z for x, y in zip(hour_minute, hour_minute_probability) for z in [x] * int(y)]


# def get_datetime(year, month, num):
#     """
#     获取datetime
#     :param year: 年
#     :param month: 月
#     :param num: 数量
#     :return: 按照概率曲线产生的时间
#     """
#     result = []
#
#     month_days = calendar.monthrange(year, month)[1]  # 当前月有几天
#     num_each_day = random_avg_split(num, month_days, 0.9)  # 计算每天分配多少数量
#
#     for day, day_num in zip(range(1, month_days + 1), num_each_day):
#         this_day = datetime(year, month, day)  # 当天00:00:00，作为基础数据
#         print(f'gen {this_day:%Y-%m-%d} for {day_num}')
#
#         for i in range(day_num):  # 按天生成具体数据
#             # 随机从1440个minute按照概率曲线取出一个值，作为一个时间的minute
#             # 下面两行是概率曲线的核心：
#             # 1. 按照分钟概率曲线取具体的数据生成分钟
#             minute_add = random.choice(hour_minute_probability_table)
#             # 2. 当天的00:00:00，加上分钟数，和随机的秒数，作为create_time
#             create_time = this_day + timedelta(minutes=minute_add, seconds=random.randint(0, 59))
#
#             result.append(create_time)
#
#         # todo 把秒打乱，不要随机分
#         # num_in_each_minute = {}  # 分配秒时使用，记录每分钟有多少总数
#     return result


def run():
    year = 2019
    month_num = {1: 100000, 2: 150000, 3: 200000, 4: 250000, 5: 300000, 6: 400000,
                 7: 500000, 8: 750000, 9: 900000, 10: 1200000, 11: 1500000, 12: 1800000}

    generator = HourMinuteProbabilityGenerator(year, hour_minute_probability)
    with open('./create_time.sql', 'w') as fout:
        sql_template = """insert into create_time(create_time) values ("""

        for month, num in month_num.items():  # 月份和每月需要产生多少create_time数据
            print('processing month {month} with {num}')  # 在生成过程中（例如循环）多打印一些参数，监控和debug都会用得到
            month_days = calendar.monthrange(year, month)[1]  # 当前月有几天
            num_each_day = random_avg_split(num, month_days)  # 计算每天分配多少数量

            for day, day_num in zip(range(1, month_days + 1), num_each_day):
                print('processing day {day} with {day_num}')
                batch = []
                this_day = datetime(year, month, day)
                for i in range(day_num):
                    create_time = generator.get_datetime(this_day)  # 把当天的datetime作为入参，会按照曲线随机产生一个时间
                    batch.append(create_time.strftime("'%Y-%m-%d %H:%M:%S'"))
                    if i % 10000 == 0:  # 每1万数据刷一次磁盘
                        fout.write(sql_template + '),('.join(batch) + ');\n')
                        fout.flush()
                        batch.clear()
                if batch:  # 跳出循环后，如果不满1万，需要再刷一次磁盘
                    fout.write(sql_template + '),('.join(batch) + ');\n')
                    fout.flush()


if __name__ == '__main__':
    run()
